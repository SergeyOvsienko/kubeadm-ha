---
- name: Create /etc/hosts
  template:
    src: master-hosts.j2
    dest: /etc/hosts
    owner: root
    group: root

- name: Create kubeadm config file
  template:
    src: kubeadm-config.yaml.j2
    dest: /opt/kubeadm-config.yaml
    owner: root
    group: root

- name: Create calico deployment manifests
  template:
    src: "calico/{{ item }}.j2"
    dest: "/opt/{{ item }}"
    owner: root
    group: root
  loop:
    - rbac-kdd.yaml
    - calico.yaml

- name: Init kubernetes cluster
  shell: |
    kubeadm init --config=kubeadm-config.yaml --experimental-upload-certs --node-name $(curl -s http://169.254.169.254/latest/meta-data/hostname)
    if [ "$?" = "0" ]; then 
        touch kubeadm.lock
        kubectl apply --kubeconfig=/etc/kubernetes/admin.conf -f rbac-kdd.yaml
        kubectl apply --kubeconfig=/etc/kubernetes/admin.conf -f calico.yaml
    fi
  args:
    chdir: /opt
    creates: kubeadm.lock

- name: Upload certs
  shell: kubeadm init phase upload-certs --experimental-upload-certs
  register: key

- set_fact:
    key: "{{ key.stdout | regex_search(regexp, '\\2') | first }}"
  vars:
    regexp: '(Using certificate key:+\s)(.*)'

- name: Create join command
  shell: kubeadm token create --ttl "{{ joinTTL }}" --print-join-command
  register: results

- set_fact:
    initMasterIpV4: "{{ ansible_default_ipv4.address }}"

- set_fact:
    internalLB: "{{ internalLB }}"

- set_fact:
    token: "{{ results.stdout | regex_search(regexp, '\\2') | first }}"
  vars:
    regexp: '(--token+\s)(\S+)'

- set_fact:
    hash: "{{ results.stdout | regex_search(regexp, '\\2') | first }}"
  vars:
    regexp: '(--discovery-token-ca-cert-hash+\s)(\S+)'
